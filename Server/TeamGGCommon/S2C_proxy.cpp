




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "S2C_proxy.h"

namespace S2C {


        
	bool Proxy::ShowChat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & a, const int & b, const float & c)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShowChat;
__msg.Write(__msgid); 
	
__msg << a;
__msg << b;
__msg << c;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ShowChat, (::Proud::RmiID)Rmi_ShowChat);
	}

	bool Proxy::ShowChat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & a, const int & b, const float & c)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShowChat;
__msg.Write(__msgid); 
	
__msg << a;
__msg << b;
__msg << c;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ShowChat, (::Proud::RmiID)Rmi_ShowChat);
	}
        
	bool Proxy::SystemChat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & txt)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SystemChat;
__msg.Write(__msgid); 
	
__msg << txt;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_SystemChat, (::Proud::RmiID)Rmi_SystemChat);
	}

	bool Proxy::SystemChat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & txt)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SystemChat;
__msg.Write(__msgid); 
	
__msg << txt;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_SystemChat, (::Proud::RmiID)Rmi_SystemChat);
	}
        
	bool Proxy::sendUserInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & userName, const int & att, const int & def)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_sendUserInfo;
__msg.Write(__msgid); 
	
__msg << userName;
__msg << att;
__msg << def;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_sendUserInfo, (::Proud::RmiID)Rmi_sendUserInfo);
	}

	bool Proxy::sendUserInfo ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & userName, const int & att, const int & def)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_sendUserInfo;
__msg.Write(__msgid); 
	
__msg << userName;
__msg << att;
__msg << def;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_sendUserInfo, (::Proud::RmiID)Rmi_sendUserInfo);
	}
        
	bool Proxy::sendInventoryData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::CFastArray<items> & ivData)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_sendInventoryData;
__msg.Write(__msgid); 
	
__msg << ivData;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_sendInventoryData, (::Proud::RmiID)Rmi_sendInventoryData);
	}

	bool Proxy::sendInventoryData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::CFastArray<items> & ivData)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_sendInventoryData;
__msg.Write(__msgid); 
	
__msg << ivData;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_sendInventoryData, (::Proud::RmiID)Rmi_sendInventoryData);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ShowChat =_PNT("ShowChat");
#else
const PNTCHAR* Proxy::RmiName_ShowChat =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_SystemChat =_PNT("SystemChat");
#else
const PNTCHAR* Proxy::RmiName_SystemChat =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_sendUserInfo =_PNT("sendUserInfo");
#else
const PNTCHAR* Proxy::RmiName_sendUserInfo =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_sendInventoryData =_PNT("sendInventoryData");
#else
const PNTCHAR* Proxy::RmiName_sendInventoryData =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_ShowChat;

}



