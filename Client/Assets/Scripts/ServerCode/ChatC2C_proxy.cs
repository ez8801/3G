




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace ChatC2C
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool P2P_Chat(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID p2pGroupID, System.String text)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.P2P_Chat;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, p2pGroupID);
		Nettention.Proud.Marshaler.Write(__msg, text);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_P2P_Chat, Common.P2P_Chat);
}

public bool P2P_Chat(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID p2pGroupID, System.String text)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.P2P_Chat;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, p2pGroupID);
Nettention.Proud.Marshaler.Write(__msg, text);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_P2P_Chat, Common.P2P_Chat);
}
public bool P2P_BigData(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ByteArray data, Nettention.Proud.HostID p2pGroupID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.P2P_BigData;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, data);
		Nettention.Proud.Marshaler.Write(__msg, p2pGroupID);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_P2P_BigData, Common.P2P_BigData);
}

public bool P2P_BigData(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ByteArray data, Nettention.Proud.HostID p2pGroupID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.P2P_BigData;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, data);
Nettention.Proud.Marshaler.Write(__msg, p2pGroupID);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_P2P_BigData, Common.P2P_BigData);
}
public bool P2P_BigDataAck(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID p2pGroupID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.P2P_BigDataAck;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, p2pGroupID);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_P2P_BigDataAck, Common.P2P_BigDataAck);
}

public bool P2P_BigDataAck(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID p2pGroupID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.P2P_BigDataAck;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, p2pGroupID);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_P2P_BigDataAck, Common.P2P_BigDataAck);
}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_P2P_Chat="P2P_Chat";
const string RmiName_P2P_BigData="P2P_BigData";
const string RmiName_P2P_BigDataAck="P2P_BigDataAck";
       
const string RmiName_First = RmiName_P2P_Chat;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_P2P_Chat="";
const string RmiName_P2P_BigData="";
const string RmiName_P2P_BigDataAck="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

