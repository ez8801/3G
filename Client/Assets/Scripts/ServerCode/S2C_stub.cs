




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace S2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool ShowChatDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String a, int b, float c);  
		public ShowChatDelegate ShowChat = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String a, int b, float c)
		{ 
			return false;
		};
		public delegate bool SystemChatDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String txt);  
		public SystemChatDelegate SystemChat = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String txt)
		{ 
			return false;
		};
		public delegate bool sendUserInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String userName, int att, int def);  
		public sendUserInfoDelegate sendUserInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String userName, int att, int def)
		{ 
			return false;
		};
		public delegate bool sendInventoryDataDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.FastArray<items> ivData);  
		public sendInventoryDataDelegate sendInventoryData = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.FastArray<items> ivData)
		{ 
			return false;
		};
		public delegate bool sendRaidRoomInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.FastArray<raidrooms> roomData);  
		public sendRaidRoomInfoDelegate sendRaidRoomInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.FastArray<raidrooms> roomData)
		{ 
			return false;
		};
		public delegate bool sendMakePVPRoomResultDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int p2pGroupId, int Result);  
		public sendMakePVPRoomResultDelegate sendMakePVPRoomResult = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int p2pGroupId, int Result)
		{ 
			return false;
		};
		public delegate bool sendPVPRoomInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.FastArray<pvprooms> roomData);  
		public sendPVPRoomInfoDelegate sendPVPRoomInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.FastArray<pvprooms> roomData)
		{ 
			return false;
		};
		public delegate bool sendRoomHostIdDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int HostId);  
		public sendRoomHostIdDelegate sendRoomHostId = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int HostId)
		{ 
			return false;
		};
		public delegate bool sendMakeAccountResultDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int Result);  
		public sendMakeAccountResultDelegate sendMakeAccountResult = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int Result)
		{ 
			return false;
		};
		public delegate bool sendLoginResultDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int Result, System.String CName, int gold);  
		public sendLoginResultDelegate sendLoginResult = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int Result, System.String CName, int gold)
		{ 
			return false;
		};
		public delegate bool sendSkillDataDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.FastArray<passiveskillinfo> skData);  
		public sendSkillDataDelegate sendSkillData = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.FastArray<passiveskillinfo> skData)
		{ 
			return false;
		};
		public delegate bool sendEquipmentDataDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.FastArray<equipinfo> eqData);  
		public sendEquipmentDataDelegate sendEquipmentData = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.FastArray<equipinfo> eqData)
		{ 
			return false;
		};
		public delegate bool sendChangeEquipWeaponResultDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int ResultCode, Nettention.Proud.FastArray<equipinfo> eqData);  
		public sendChangeEquipWeaponResultDelegate sendChangeEquipWeaponResult = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int ResultCode, Nettention.Proud.FastArray<equipinfo> eqData)
		{ 
			return false;
		};
		public delegate bool sendBattleInfoResultDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int ResultCode, Nettention.Proud.FastArray<battleinfo> biData);  
		public sendBattleInfoResultDelegate sendBattleInfoResult = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int ResultCode, Nettention.Proud.FastArray<battleinfo> biData)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
case Common.ShowChat:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		System.String a; Test.Read(__msg,out a);	
int b; Test.Read(__msg,out b);	
float c; Test.Read(__msg,out c);	
core.PostCheckReadMessage(__msg, RmiName_ShowChat);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=a.ToString()+",";
parameterString+=b.ToString()+",";
parameterString+=c.ToString()+",";
			NotifyCallFromStub(Common.ShowChat, RmiName_ShowChat,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.ShowChat;
			summary.rmiName = RmiName_ShowChat;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=ShowChat (remote,ctx , a, b, c );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_ShowChat);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.ShowChat;
			summary.rmiName = RmiName_ShowChat;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.SystemChat:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		System.String txt; Test.Read(__msg,out txt);	
core.PostCheckReadMessage(__msg, RmiName_SystemChat);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=txt.ToString()+",";
			NotifyCallFromStub(Common.SystemChat, RmiName_SystemChat,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.SystemChat;
			summary.rmiName = RmiName_SystemChat;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=SystemChat (remote,ctx , txt );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_SystemChat);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.SystemChat;
			summary.rmiName = RmiName_SystemChat;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.sendUserInfo:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		System.String userName; Test.Read(__msg,out userName);	
int att; Test.Read(__msg,out att);	
int def; Test.Read(__msg,out def);	
core.PostCheckReadMessage(__msg, RmiName_sendUserInfo);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=userName.ToString()+",";
parameterString+=att.ToString()+",";
parameterString+=def.ToString()+",";
			NotifyCallFromStub(Common.sendUserInfo, RmiName_sendUserInfo,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.sendUserInfo;
			summary.rmiName = RmiName_sendUserInfo;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=sendUserInfo (remote,ctx , userName, att, def );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_sendUserInfo);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.sendUserInfo;
			summary.rmiName = RmiName_sendUserInfo;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.sendInventoryData:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		Nettention.Proud.FastArray<items> ivData; Test.Read(__msg,out ivData);	
core.PostCheckReadMessage(__msg, RmiName_sendInventoryData);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=ivData.ToString()+",";
			NotifyCallFromStub(Common.sendInventoryData, RmiName_sendInventoryData,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.sendInventoryData;
			summary.rmiName = RmiName_sendInventoryData;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=sendInventoryData (remote,ctx , ivData );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_sendInventoryData);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.sendInventoryData;
			summary.rmiName = RmiName_sendInventoryData;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.sendRaidRoomInfo:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		Nettention.Proud.FastArray<raidrooms> roomData; Test.Read(__msg,out roomData);	
core.PostCheckReadMessage(__msg, RmiName_sendRaidRoomInfo);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=roomData.ToString()+",";
			NotifyCallFromStub(Common.sendRaidRoomInfo, RmiName_sendRaidRoomInfo,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.sendRaidRoomInfo;
			summary.rmiName = RmiName_sendRaidRoomInfo;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=sendRaidRoomInfo (remote,ctx , roomData );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_sendRaidRoomInfo);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.sendRaidRoomInfo;
			summary.rmiName = RmiName_sendRaidRoomInfo;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.sendMakePVPRoomResult:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int p2pGroupId; Test.Read(__msg,out p2pGroupId);	
int Result; Test.Read(__msg,out Result);	
core.PostCheckReadMessage(__msg, RmiName_sendMakePVPRoomResult);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=p2pGroupId.ToString()+",";
parameterString+=Result.ToString()+",";
			NotifyCallFromStub(Common.sendMakePVPRoomResult, RmiName_sendMakePVPRoomResult,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.sendMakePVPRoomResult;
			summary.rmiName = RmiName_sendMakePVPRoomResult;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=sendMakePVPRoomResult (remote,ctx , p2pGroupId, Result );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_sendMakePVPRoomResult);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.sendMakePVPRoomResult;
			summary.rmiName = RmiName_sendMakePVPRoomResult;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.sendPVPRoomInfo:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		Nettention.Proud.FastArray<pvprooms> roomData; Test.Read(__msg,out roomData);	
core.PostCheckReadMessage(__msg, RmiName_sendPVPRoomInfo);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=roomData.ToString()+",";
			NotifyCallFromStub(Common.sendPVPRoomInfo, RmiName_sendPVPRoomInfo,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.sendPVPRoomInfo;
			summary.rmiName = RmiName_sendPVPRoomInfo;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=sendPVPRoomInfo (remote,ctx , roomData );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_sendPVPRoomInfo);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.sendPVPRoomInfo;
			summary.rmiName = RmiName_sendPVPRoomInfo;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.sendRoomHostId:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int HostId; Test.Read(__msg,out HostId);	
core.PostCheckReadMessage(__msg, RmiName_sendRoomHostId);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=HostId.ToString()+",";
			NotifyCallFromStub(Common.sendRoomHostId, RmiName_sendRoomHostId,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.sendRoomHostId;
			summary.rmiName = RmiName_sendRoomHostId;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=sendRoomHostId (remote,ctx , HostId );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_sendRoomHostId);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.sendRoomHostId;
			summary.rmiName = RmiName_sendRoomHostId;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.sendMakeAccountResult:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int Result; Test.Read(__msg,out Result);	
core.PostCheckReadMessage(__msg, RmiName_sendMakeAccountResult);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=Result.ToString()+",";
			NotifyCallFromStub(Common.sendMakeAccountResult, RmiName_sendMakeAccountResult,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.sendMakeAccountResult;
			summary.rmiName = RmiName_sendMakeAccountResult;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=sendMakeAccountResult (remote,ctx , Result );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_sendMakeAccountResult);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.sendMakeAccountResult;
			summary.rmiName = RmiName_sendMakeAccountResult;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.sendLoginResult:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int Result; Test.Read(__msg,out Result);	
System.String CName; Test.Read(__msg,out CName);	
int gold; Test.Read(__msg,out gold);	
core.PostCheckReadMessage(__msg, RmiName_sendLoginResult);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=Result.ToString()+",";
parameterString+=CName.ToString()+",";
parameterString+=gold.ToString()+",";
			NotifyCallFromStub(Common.sendLoginResult, RmiName_sendLoginResult,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.sendLoginResult;
			summary.rmiName = RmiName_sendLoginResult;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=sendLoginResult (remote,ctx , Result, CName, gold );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_sendLoginResult);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.sendLoginResult;
			summary.rmiName = RmiName_sendLoginResult;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.sendSkillData:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		Nettention.Proud.FastArray<passiveskillinfo> skData; Test.Read(__msg,out skData);	
core.PostCheckReadMessage(__msg, RmiName_sendSkillData);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=skData.ToString()+",";
			NotifyCallFromStub(Common.sendSkillData, RmiName_sendSkillData,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.sendSkillData;
			summary.rmiName = RmiName_sendSkillData;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=sendSkillData (remote,ctx , skData );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_sendSkillData);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.sendSkillData;
			summary.rmiName = RmiName_sendSkillData;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.sendEquipmentData:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		Nettention.Proud.FastArray<equipinfo> eqData; Test.Read(__msg,out eqData);	
core.PostCheckReadMessage(__msg, RmiName_sendEquipmentData);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=eqData.ToString()+",";
			NotifyCallFromStub(Common.sendEquipmentData, RmiName_sendEquipmentData,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.sendEquipmentData;
			summary.rmiName = RmiName_sendEquipmentData;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=sendEquipmentData (remote,ctx , eqData );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_sendEquipmentData);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.sendEquipmentData;
			summary.rmiName = RmiName_sendEquipmentData;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.sendChangeEquipWeaponResult:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int ResultCode; Test.Read(__msg,out ResultCode);	
Nettention.Proud.FastArray<equipinfo> eqData; Test.Read(__msg,out eqData);	
core.PostCheckReadMessage(__msg, RmiName_sendChangeEquipWeaponResult);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=ResultCode.ToString()+",";
parameterString+=eqData.ToString()+",";
			NotifyCallFromStub(Common.sendChangeEquipWeaponResult, RmiName_sendChangeEquipWeaponResult,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.sendChangeEquipWeaponResult;
			summary.rmiName = RmiName_sendChangeEquipWeaponResult;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=sendChangeEquipWeaponResult (remote,ctx , ResultCode, eqData );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_sendChangeEquipWeaponResult);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.sendChangeEquipWeaponResult;
			summary.rmiName = RmiName_sendChangeEquipWeaponResult;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.sendBattleInfoResult:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int ResultCode; Test.Read(__msg,out ResultCode);	
Nettention.Proud.FastArray<battleinfo> biData; Test.Read(__msg,out biData);	
core.PostCheckReadMessage(__msg, RmiName_sendBattleInfoResult);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=ResultCode.ToString()+",";
parameterString+=biData.ToString()+",";
			NotifyCallFromStub(Common.sendBattleInfoResult, RmiName_sendBattleInfoResult,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.sendBattleInfoResult;
			summary.rmiName = RmiName_sendBattleInfoResult;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=sendBattleInfoResult (remote,ctx , ResultCode, biData );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_sendBattleInfoResult);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.sendBattleInfoResult;
			summary.rmiName = RmiName_sendBattleInfoResult;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_ShowChat="ShowChat";
const string RmiName_SystemChat="SystemChat";
const string RmiName_sendUserInfo="sendUserInfo";
const string RmiName_sendInventoryData="sendInventoryData";
const string RmiName_sendRaidRoomInfo="sendRaidRoomInfo";
const string RmiName_sendMakePVPRoomResult="sendMakePVPRoomResult";
const string RmiName_sendPVPRoomInfo="sendPVPRoomInfo";
const string RmiName_sendRoomHostId="sendRoomHostId";
const string RmiName_sendMakeAccountResult="sendMakeAccountResult";
const string RmiName_sendLoginResult="sendLoginResult";
const string RmiName_sendSkillData="sendSkillData";
const string RmiName_sendEquipmentData="sendEquipmentData";
const string RmiName_sendChangeEquipWeaponResult="sendChangeEquipWeaponResult";
const string RmiName_sendBattleInfoResult="sendBattleInfoResult";
       
const string RmiName_First = RmiName_ShowChat;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_ShowChat="";
const string RmiName_SystemChat="";
const string RmiName_sendUserInfo="";
const string RmiName_sendInventoryData="";
const string RmiName_sendRaidRoomInfo="";
const string RmiName_sendMakePVPRoomResult="";
const string RmiName_sendPVPRoomInfo="";
const string RmiName_sendRoomHostId="";
const string RmiName_sendMakeAccountResult="";
const string RmiName_sendLoginResult="";
const string RmiName_sendSkillData="";
const string RmiName_sendEquipmentData="";
const string RmiName_sendChangeEquipWeaponResult="";
const string RmiName_sendBattleInfoResult="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

